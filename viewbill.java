import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.Font;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.ImageIcon;
import java.awt.Color;

public class viewbill extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table;
    private JTextField textField;
    private JTextField textField_1;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    viewbill frame = new viewbill();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public viewbill() {
        setTitle("View Bill");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 962, 761);
        contentPane = new JPanel();
        contentPane.setBackground(new Color(255, 128, 0));
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        JLabel lblNewLabel = new JLabel("View Bill");
        lblNewLabel.setBounds(400, 41, 191, 37);
        lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 30));
        contentPane.add(lblNewLabel);

        JSeparator separator = new JSeparator();
        separator.setBounds(10, 83, 953, 12);
        contentPane.add(separator);

        JButton backButton = new JButton("Back");
        backButton.setBounds(46, 593, 149, 37);
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                AdminDashboard newFrame = new AdminDashboard();
                newFrame.setVisible(true);
                SwingUtilities.windowForComponent(backButton).dispose();
            }
        });
        backButton.setFont(new Font("Tahoma", Font.BOLD, 20));
        contentPane.add(backButton);

        JButton btnShow = new JButton("Show");
        btnShow.setBounds(295, 593, 149, 37);
        btnShow.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                showBillData();
            }
        });
        btnShow.setFont(new Font("Tahoma", Font.BOLD, 20));
        contentPane.add(btnShow);

        JButton btnClose = new JButton("Close");
        btnClose.setBounds(727, 22, 149, 37);
        btnClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setVisible(false);
            }
        });
        btnClose.setFont(new Font("Tahoma", Font.BOLD, 20));
        contentPane.add(btnClose);

        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setBounds(27, 201, 849, 369);
        contentPane.add(scrollPane);

        table = new JTable();
        scrollPane.setViewportView(table);
        table.setModel(new DefaultTableModel(
            new Object[][] {},
            new String[] {
                "Customer Name", "Bill Id", "Date", "Total Paid", "Generated By"
            }
        ));
        
        JButton btnShow_1 = new JButton("Delete");
        btnShow_1.setBounds(520, 593, 149, 37);
        btnShow_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
    				Class.forName("com.mysql.cj.jdbc.Driver");
    	            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3307/medicine","root","raj@2004");
    	            Statement st = conn.createStatement();
    	            String text = textField.getText();
    	            String sql ="DELETE FROM bills WHERE billid='"+text+"'";
    	            st.executeUpdate(sql);
    	            JOptionPane.showMessageDialog(null,"Deleted from bills","Delete Success",3);
    			}catch(Exception s) {
    				JOptionPane.showMessageDialog(null,s,"Delete Falied",3);
    			}
    			}
        }
    );
        btnShow_1.setFont(new Font("Tahoma", Font.BOLD, 20));
        contentPane.add(btnShow_1);
        
        JLabel bill = new JLabel("Bill_id");
        bill.setBounds(46, 105, 112, 30);
        bill.setFont(new Font("Tahoma", Font.BOLD, 15));
        contentPane.add(bill);
        
        textField = new JTextField();
        textField.setBounds(121, 104, 142, 37);
        contentPane.add(textField);
        textField.setColumns(10);
        
        JButton btnShow_1_1 = new JButton("search");
        btnShow_1_1.setBounds(295, 105, 149, 37);
        btnShow_1_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try{

		            table.setModel(new DefaultTableModel());

		            Class.forName("com.mysql.cj.jdbc.Driver");
		            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3307/medicine","root","raj@2004");
		            Statement st = conn.createStatement();
		            String v = textField.getText();
		            String sql ="Select * from bills where billid='"+v+"'";
		            ResultSet rs = st.executeQuery(sql);
		            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
		            DefaultTableModel model= (DefaultTableModel) table.getModel();

		            int cols=rsmd.getColumnCount();
		            String[] colName= new String[cols];

		            for (int i=0;i<cols;i++)
		            {
		                colName[i] = rsmd.getColumnName(i+1).toUpperCase();
		            }
		            model.setColumnIdentifiers(colName);

		            String n,f;
		            while(rs.next())
		            {
		                n = rs.getString(1);
		                f = rs.getString(2);
		                String[] rows= {n,f,rs.getString(3),rs.getString(4),rs.getString(5)};
		                model.addRow(rows);
		            }
		            st.close();
		            conn.close();

		        }catch (Exception E){
		            JOptionPane.showMessageDialog(null,E,"Refresh Failed",3);
		        }
			}
        });
        btnShow_1_1.setFont(new Font("Tahoma", Font.BOLD, 20));
        contentPane.add(btnShow_1_1);
        
        JLabel lblNewLabel_1_1 = new JLabel("Date");
        lblNewLabel_1_1.setBounds(46, 161, 112, 30);
        lblNewLabel_1_1.setFont(new Font("Tahoma", Font.BOLD, 15));
        contentPane.add(lblNewLabel_1_1);
        
        textField_1 = new JTextField();
        textField_1.setBounds(121, 154, 142, 37);
        textField_1.setColumns(10);
        contentPane.add(textField_1);
        
        JButton btnShow_1_2 = new JButton("Update");
        btnShow_1_2.setBounds(727, 593, 149, 37);
        btnShow_1_2.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
    				String i=textField.getText();
    				String d=textField_1.getText();

    				
    				try {
    					Class.forName("com.mysql.cj.jdbc.Driver");
            			Connection con1 = (Connection)DriverManager.getConnection("jdbc:mysql://localhost:3307/medicine","root","raj@2004");
    				   
    				   
    					PreparedStatement pst = con1.prepareStatement("update bills set Date=? where billid='"+i+"'");
    					
    				   
    				    //pst.setString(1, i);
    				    pst.setString(1, d);
    				    
    				   
    				    
    				    int rowsAffected = pst.executeUpdate();
    				    if (rowsAffected > 0) {
    				        JOptionPane.showMessageDialog(null, "Successfully updated");
    				        setVisible(false);
    				        new Dashboard().setVisible(true);
    				    } else {
    				        JOptionPane.showMessageDialog(null, "Failed to update");
    				    }
    				    
    				    pst.close();
    				    con1.close();
    				} catch (Exception e1) {
    				    e1.printStackTrace();
    				    // Handle any SQL errors
    				}
        	}
        });
        btnShow_1_2.setFont(new Font("Tahoma", Font.BOLD, 20));
        contentPane.add(btnShow_1_2);
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(100);
        table.getColumnModel().getColumn(3).setPreferredWidth(100);
        table.getColumnModel().getColumn(4).setPreferredWidth(100);
    }

    private void showBillData() {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3307/medicine", "root", "raj@2004");
            String sql = "SELECT * FROM bills";
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();
            DefaultTableModel dt = (DefaultTableModel) table.getModel();
            dt.setRowCount(0);

            while (rs.next()) {
                Object[] row = {
                    rs.getString("name"),
                    rs.getString("billid"),
                    rs.getString("date"),
                    rs.getString("total"),
                    rs.getString("generatedby")
                };
                dt.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error fetching bill data.");
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (con != null) con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
